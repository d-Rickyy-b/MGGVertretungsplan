plugins {
    id 'com.android.application'
    id 'jacoco'
    id 'com.github.kt3k.coveralls'
}

jacoco {
    toolVersion = "0.8.2"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'


    lintOptions {
        abortOnError false
    }

    defaultConfig {
        applicationId "de.aurora.mggvertretungsplan"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 28
        versionName "3.2.1"
        multiDexEnabled true

        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }

    compileOptions.encoding = "utf-8"

    signingConfigs {
        release
    }

    def isRunningOnTravis = System.getenv("CI") == "true"

    if (isRunningOnTravis) {
        // configure keystore
        signingConfigs.release.storeFile = file("../keystore.ks")
        signingConfigs.release.storePassword = System.getenv("keystore_password")
        signingConfigs.release.keyAlias = System.getenv("keystore_alias")
        signingConfigs.release.keyPassword = System.getenv("keystore_alias_password")
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            if (isRunningOnTravis) {
                testCoverageEnabled = true
                signingConfig signingConfigs.release
            }
        }

        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            testCoverageEnabled = true
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    // Required -- JUnit 4 framework (Unit tests)
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.8.47'

    // Support libraries
    implementation 'com.google.android.material:material:1.1.0-alpha02'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.1.0-alpha01'
    implementation 'androidx.recyclerview:recyclerview:1.1.0-alpha01'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.preference:preference:1.1.0-alpha02'
    implementation 'androidx.browser:browser:1.0.0'
    implementation 'androidx.core:core:1.1.0-alpha03'

    implementation "android.arch.work:work-runtime:1.0.0-beta01"

    // Other libraries
    implementation 'org.jsoup:jsoup:1.10.2'
    //noinspection GradleDependency
    implementation 'com.github.paolorotolo:appintro:v5.1.0'
    implementation 'com.thebluealliance:spectrum:0.7.1'
}

// https://proandroiddev.com/unified-code-coverage-for-android-revisited-44789c9b722f
task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}

coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
}

tasks.coveralls {
    onlyIf { System.env.'CI' }
    dependsOn 'jacocoTestReport'
}
