plugins {
    id 'com.android.application'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.12.0'
}

jacoco {
    toolVersion = "0.8.7"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
    testLogging {
        exceptionFormat "full"
        events "skipped", "passed", "failed"
        showStandardStreams true
    }
}

android {
    compileSdkVersion 30
    buildToolsVersion '30.0.2'


    lintOptions {
        abortOnError false
    }

    defaultConfig {
        applicationId "de.aurora.mggvertretungsplan"
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 31
        versionName "3.2.4"
        multiDexEnabled true

        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }

    compileOptions {
        encoding = "utf-8"
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled = true
        // Sets Java compatibility to Java 8
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    signingConfigs {
        release
    }

    def isRunningOnCI = System.getenv("CI") == "true"


    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            archivesBaseName = "mggvertretungsplan_v${defaultConfig.versionName}_${defaultConfig.versionCode}"
            applicationVariants.all { variant -> renameAPK(variant) }
        }

        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            testCoverageEnabled = true
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

static def renameAPK(variant) {
    // Renames the output files so that we don't have "-unsigned.apk"
    variant.outputs.each { output ->
        String filename = output.outputFileName
        output.outputFileName = filename.replace("-unsigned", "")
    }
}

dependencies {
    coreLibraryDesugaring("com.android.tools:desugar_jdk_libs:1.1.5")

    // Required -- JUnit 4 framework (Unit tests)
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:3.11.0'

    // Support libraries
    implementation 'com.google.android.material:material:1.4.0-rc01'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'androidx.browser:browser:1.3.0'
    implementation 'androidx.core:core:1.5.0'

    implementation "android.arch.work:work-runtime:1.0.1"

    // Other libraries
    implementation 'org.jsoup:jsoup:1.10.2'
    //noinspection GradleDependency
    implementation 'com.github.paolorotolo:appintro:v5.1.0'
    implementation 'com.thebluealliance:spectrum:0.7.1'
}

// https://proandroiddev.com/unified-code-coverage-for-android-revisited-44789c9b722f
task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.from files([mainSrc])
    classDirectories.from files([debugTree])
    executionData.from fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}

coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
}

tasks.coveralls {
    onlyIf { System.env.'CI' }
    dependsOn 'jacocoTestReport'
}
