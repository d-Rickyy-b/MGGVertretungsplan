apply plugin: 'jacoco'
jacoco {
    toolVersion = "0.7.5.201505241946"
}

project.afterEvaluate {
    // Grab all build types and product flavors
    def buildTypes = android.buildTypes.collect { type ->
        type.name
    }
    def productFlavors = android.productFlavors.collect { flavor ->
        flavor.name
    }
    // When no product flavors defined, use empty
    if (!productFlavors) productFlavors.add('')
    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->
            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }
            def testTaskName = "test${sourceName.capitalize()}UnitTest"
            // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'

            task "${testTaskName}Coverage" (type:JacocoReport, dependsOn: "$testTaskName") {
                group = "Reporting"
                description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

                def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
                def debugTree = fileTree(dir: "${project.buildDir}/intermediates/classes/$sourcePath", excludes: fileFilter)
                def mainSrc = [ "${project.projectDir}/src/main/java",
                                "${project.projectDir}/src/$productFlavorName/java",
                                "${project.projectDir}/src/$buildTypeName/java"
                              ]

                sourceDirectories = files([mainSrc])
                classDirectories = files([debugTree])
                executionData = fileTree(dir: project.buildDir, includes: [
                        "jacoco/${testTaskName}.exec", 'outputs/code-coverage/connected/*coverage.ec'
                ])

                reports {
                    xml.enabled = true
                    html.enabled = true
                }
            }
        }
    }
}